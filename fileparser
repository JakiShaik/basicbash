#!/bin/bash

#Creating file to store input file given or to get input from stdin
datafilepath="datafile$$"

#Checking for number of input arguments
#if loop for stdin
if [ "$#" = "1" ]
then
    cat > "$datafilepath"
#if loop for file input
elif [ "$#" = "2" ]
then
    datafilepath=$2
    #checking whether valid file
    if [[ ! -r $datafilepath ]]
    then
	echo -e "./stats: cannot read $datafilepath" 1>&2
	exit 1
    fi
#Error Message in case of more than two or less than one arguments
else
    echo -e "./stats: {-rows|-cols} [file]" 1>&2
    exit 1
fi

#trap to catch interrupt signals
trap "rm -f tmp*; rm -f datafile* exit 1" INT KILL HUP TERM

#if we have to compute for rows 
if [[ $1 == -r* ]] 
then
    echo "Average Median"
    while read line
    do
	sum=0
	av=0
	echo -e $line > tmprow$$
        a=($(wc -w tmprow$$))
	avgdvdr=$a
	medpos=$(( ($a /2) + 1 ))
	#Converting into column file to compute sum and calculate median by storing it in tmpcol$$
	cat tmprow$$ | tr ' ' '\n'  > tmpcol$$
        sort -n tmpcol$$ -o tmpcol$$
	medposchk=0
	while read num
        do
	    ((medposchk++))
            sum=$(( $sum + $num ))
	    #Since the file is sorted median value is always quotient + 1 of number of elements in the column
            if [ "$medposchk" = "$medpos" ];
            then
                med=$num
            fi
        done < tmpcol$$
	av=$((($sum + ($avgdvdr/2))/$avgdvdr ))
        printf "$av\t$med\n"
    done < $datafilepath
    rm -f tmp*
    rm -f data*
    exit 0
#To compute stats for Columns
elif [[ $1 == -c* ]]
then
    #Getting number of coloumns in the file by extracting first row
    cnt=$( head -n 1 $datafilepath | wc -w )
    echo "Averages:"
    for((i=1; $i<=$cnt; ((i++))))
    do
	#Extracting and Sorting each coloumns and storing it in a file to iterate through it.  
	cat $datafilepath | tr -s [:blank:] | cut -f$i $datafilepath > tmpcol$$
	sort -n tmpcol$$ -o tmpcol$$
	sum=0
        av=0
        a=($(wc -w tmpcol$$))
	while read num
        do
            sum=$(( $sum + $num ))
        done < tmpcol$$
        av=$((($sum + ($a/2))/$a ))
	printf "$av \t"
    done
    printf "\n"
    echo "Medians:"
    for((i=1; $i<=$cnt; ((i++))))
    do
	#Extracting and Sorting each coloumns and storing it in a file to iterate through it.
        cut -f$i $datafilepath > tmpcol1$$
        sort -n tmpcol1$$ -o tmpcol1$$
        c=0
        wcnt=($(wc -w tmpcol1$$))
        d=`expr $wcnt / 2`
        medpos=`expr $d  + 1`
        while read num
        do
            ((c++))
	    #Since the file is sorted median value is always quotient + 1 of number of elements in the column
            if [[ "$c" = "$medpos" ]];
            then
                printf "$num\t"
            fi
        done < tmpcol1$$
    done
    printf "\n"
    rm -f tmp*
    rm -f data*
    exit 0
#Usage message if other than -cols or -rows is specified 
else
    echo -e "./stats: {-rows|-cols} [file]" 1>&2
    exit 1
fi
